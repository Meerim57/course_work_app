import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from datetime import datetime
from scipy import stats
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
import plotly.express as px
import plotly.graph_objects as go
import sys
import os
import warnings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
warnings.filterwarnings('ignore')
st.set_page_config(
    page_title="HR Analytics System",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìä HR Analytics Dashboard")
st.markdown("""
    <style>
        .reportview-container {
            margin-top: -2em;
        }
        #MainMenu {visibility: hidden;}
        .stDeployButton {display:none;}
        footer {visibility: hidden;}
        #stDecoration {display:none;}
    </style>
""", unsafe_allow_html=True)


# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_sample_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö"""
    data = {
        'employee_id': np.arange(1, 501),
        'age': np.random.randint(22, 65, size=500),
        'gender': np.random.choice(['Male', 'Female'], size=500, p=[0.55, 0.45]),
        'education': np.random.choice(['High School', 'Bachelor', 'Master', 'PhD'],
                                      size=500, p=[0.2, 0.5, 0.25, 0.05]),
        'department': np.random.choice(['HR', 'IT', 'Finance', 'Marketing', 'Operations'],
                                       size=500, p=[0.1, 0.3, 0.2, 0.2, 0.2]),
        'position': np.random.choice(['Junior', 'Middle', 'Senior', 'Manager', 'Director'],
                                     size=500, p=[0.3, 0.4, 0.2, 0.08, 0.02]),
        'salary': np.round(np.random.normal(5000, 2000, 500)).clip(2000, 15000),
        'experience': np.random.randint(1, 20, size=500),
        'performance_score': np.random.randint(60, 101, size=500),
        'satisfaction_score': np.round(np.random.normal(7.5, 1.5, 500)).clip(1, 10),
        'overtime': np.random.choice(['Yes', 'No'], size=500, p=[0.35, 0.65]),
        'attrition': np.random.choice(['Yes', 'No'], size=500, p=[0.2, 0.8]),
        'training_hours': np.random.randint(0, 41, size=500)
    }
    df = pd.DataFrame(data)
    df['salary'] = df['salary'].astype(int)
    df['satisfaction_score'] = df['satisfaction_score'].astype(int)
    return df


@st.cache_data
def load_uploaded_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    try:
        df = pd.read_csv(uploaded_file)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_columns = {'age', 'salary', 'department', 'position'}
        if not required_columns.issubset(df.columns):
            missing = required_columns - set(df.columns)
            st.error(f"–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing}")
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        date_columns = [col for col in df.columns if 'date' in col.lower()]
        for col in date_columns:
            try:
                df[col] = pd.to_datetime(df[col])
            except:
                pass

        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        return None


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
data_source = st.sidebar.radio(
    "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
    ["–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ", "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV"],
    index=0
)

df = None

if data_source == "–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ":
    df = load_sample_data()
    st.sidebar.success("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (500 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)")
else:
    uploaded_file = st.sidebar.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
        type=["csv"],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∫–æ–ª–æ–Ω–∫–∏: age, salary, department, position"
    )
    if uploaded_file is not None:
        df = load_uploaded_data(uploaded_file)

if df is None:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    st.stop()

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
tab1, tab2, tab3, tab4 = st.tabs(["–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–°—Ç–∞—Ç. –∞–Ω–∞–ª–∏–∑", "ML –ê–Ω–∞–ª–∏–∑"])

with tab1:
    st.header("–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.write(f"–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(df)}")
        st.write(f"–û—Ç–¥–µ–ª–æ–≤: {df['department'].nunique()}")
        st.write(f"–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${df['salary'].mean():,.2f}")
        st.write(f"–£—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—É—á–µ—Å—Ç–∏: {df['attrition'].value_counts(normalize=True)['Yes']:.1%}")

    st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    rows_to_show = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", 5, 100, 10)
    st.dataframe(df.head(rows_to_show), use_container_width=True)

    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ç–¥–µ–ª–∞–º")
    dept_dist = df['department'].value_counts().reset_index()
    dept_dist.columns = ['Department', 'Count']
    fig = px.bar(dept_dist, x='Department', y='Count', color='Department')
    st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.header("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    plot_type = st.selectbox(
        "–¢–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
        ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–ë–æ–∫—Å–ø–ª–æ—Ç", "Scatter Plot", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞"]
    )
    
    if plot_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
        col1, col2 = st.columns(2)
        with col1:
            numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
            feature = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫", numeric_cols)
        with col2:
            hue = st.selectbox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ", ['None'] + df.select_dtypes(exclude=np.number).columns.tolist())
        fig = px.histogram(
            df,
            x=feature,
            color=None if hue == 'None' else hue,
            nbins=20,
            marginal="box",
            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {feature}"
        )
        st.plotly_chart(fig, use_container_width=True)

    elif plot_type == "–ë–æ–∫—Å–ø–ª–æ—Ç":
        col1, col2 = st.columns(2)
        with col1:
            numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
            feature = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫", numeric_cols)
        with col2:
            category = st.selectbox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ", df.select_dtypes(exclude=np.number).columns.tolist())
        fig = px.box(
            df,
            x=category,
            y=feature,
            color=category,
            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {feature} –ø–æ {category}"
        )
        st.plotly_chart(fig, use_container_width=True)

    elif plot_type == "Scatter Plot":
        col1, col2, col3 = st.columns(3)
        with col1:
            x_feature = st.selectbox("X –æ—Å—å", df.select_dtypes(include=np.number).columns.tolist())
        with col2:
            y_feature = st.selectbox("Y –æ—Å—å", df.select_dtypes(include=np.number).columns.tolist())
        with col3:
            hue = st.selectbox("–¶–≤–µ—Ç", ['None'] + df.select_dtypes(exclude=np.number).columns.tolist())
        fig = px.scatter(
            df,
            x=x_feature,
            y=y_feature,
            color=None if hue == 'None' else hue,
            hover_data=df.columns.tolist(),
            title=f"{x_feature} vs {y_feature}"
        )
        st.plotly_chart(fig, use_container_width=True)

    elif plot_type == "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è":
        numeric_df = df.select_dtypes(include=np.number)
        if len(numeric_df.columns) < 2:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        else:
            corr_matrix = numeric_df.corr()
            fig = go.Figure(
                data=go.Heatmap(
                    z=corr_matrix,
                    x=corr_matrix.columns,
                    y=corr_matrix.columns,
                    colorscale='RdBu',
                    zmin=-1,
                    zmax=1
                )
            )
            fig.update_layout(title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
            st.plotly_chart(fig, use_container_width=True)

    elif plot_type == "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞":
        # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        pivot_col1 = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç—Ä–æ–∫", df.select_dtypes(exclude=np.number).columns.tolist())
        pivot_col2 = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤", df.select_dtypes(exclude=np.number).columns.tolist())
        value_col = st.selectbox("–ó–Ω–∞—á–µ–Ω–∏–µ", df.select_dtypes(include=np.number).columns.tolist())
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_columns = df.select_dtypes(exclude=np.number).columns.tolist()
            default_numeric_columns = df.select_dtypes(include=np.number).columns.tolist()
            pivot_col1 = default_columns[0] if default_columns else None
            pivot_col2 = default_columns[1] if len(default_columns) > 1 else None
            value_col = default_numeric_columns[0] if default_numeric_columns else None
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ø–∏—Å–∫–∏
            df[pivot_col1] = df[pivot_col1].apply(lambda x: str(x) if isinstance(x, list) else x)
            df[pivot_col2] = df[pivot_col2].apply(lambda x: str(x) if isinstance(x, list) else x)
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            df = df.dropna(subset=[pivot_col1, pivot_col2, value_col])
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            pivot_df = df.pivot_table(
                index=pivot_col1,
                columns=pivot_col2,
                values=value_col,
                aggfunc='mean'
            ).fillna(0)
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            fig = px.imshow(
                pivot_df,
                labels=dict(x=pivot_col2, y=pivot_col1, color=value_col),
                title=f"–°—Ä–µ–¥–Ω–µ–µ {value_col} –ø–æ {pivot_col1} –∏ {pivot_col2}"
            )
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
            st.plotly_chart(fig, use_container_width=True, key="heatmap_plot")
        except ValueError as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")

with tab3:
    st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")

    analysis_type = st.selectbox(
        "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
        ["–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "t-—Ç–µ—Å—Ç", "ANOVA", "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—á–µ—Å—Ç–∏"]
    )

    if analysis_type == "–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        st.subheader("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.dataframe(df.describe(include='all').T, use_container_width=True)

        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º")
        department = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª", ['All'] + df['department'].unique().tolist())
        if department == 'All':
            st.dataframe(df.groupby('department').describe().T, use_container_width=True)
        else:
            st.dataframe(df[df['department'] == department].describe().T, use_container_width=True)

    elif analysis_type == "t-—Ç–µ—Å—Ç":
        st.subheader("–ü–∞—Ä–Ω—ã–π t-—Ç–µ—Å—Ç")

        col1, col2, col3 = st.columns(3)

        with col1:
            numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
            feature = st.selectbox("–ü—Ä–∏–∑–Ω–∞–∫ –¥–ª—è —Ç–µ—Å—Ç–∞", numeric_cols)

        with col2:
            category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫", df.select_dtypes(exclude=np.number).columns.tolist())

        with col3:
            unique_values = df[category].unique()
            if len(unique_values) != 2:
                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–Ω–∞—Ä–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                st.stop()
            group1, group2 = st.select_slider(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
                options=unique_values,
                value=(unique_values[0], unique_values[1])
            )

        group1_data = df[df[category] == group1][feature]
        group2_data = df[df[category] == group2][feature]

        t_stat, p_val = stats.ttest_ind(group1_data, group2_data, equal_var=False)

        st.metric(f"–°—Ä–µ–¥–Ω–µ–µ –¥–ª—è {group1}", f"{group1_data.mean():.2f}")
        st.metric(f"–°—Ä–µ–¥–Ω–µ–µ –¥–ª—è {group2}", f"{group2_data.mean():.2f}")
        st.metric("t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"{t_stat:.4f}")
        st.metric("p-–∑–Ω–∞—á–µ–Ω–∏–µ", f"{p_val:.4f}")

        if p_val < 0.05:
            st.success("–†–∞–∑–ª–∏—á–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã (p < 0.05)")
        else:
            st.error("–†–∞–∑–ª–∏—á–∏—è –Ω–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã (p >= 0.05)")

    elif analysis_type == "ANOVA":
        st.subheader("–û–¥–Ω–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –¥–∏—Å–ø–µ—Ä—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

        col1, col2 = st.columns(2)

        with col1:
            numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
            feature = st.selectbox("–ü—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", numeric_cols)

        with col2:
            category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏",
                                    df.select_dtypes(exclude=np.number).columns.tolist())

        groups = df[category].unique()
        if len(groups) < 2:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è ANOVA")
            st.stop()

        samples = [df[df[category] == group][feature] for group in groups]
        f_stat, p_val = stats.f_oneway(*samples)

        st.metric("F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"{f_stat:.4f}")
        st.metric("p-–∑–Ω–∞—á–µ–Ω–∏–µ", f"{p_val:.4f}")

        if p_val < 0.05:
            st.success("–ï—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ (p < 0.05)")

            # Post-hoc —Ç–µ—Å—Ç –¢—å—é–∫–∏
            from statsmodels.stats.multicomp import pairwise_tukeyhsd

            tukey = pairwise_tukeyhsd(
                endog=df[feature],
                groups=df[category],
                alpha=0.05
            )

            st.subheader("Post-hoc –∞–Ω–∞–ª–∏–∑ (–¢—å—é–∫–∏)")
            st.text(str(tukey))
        else:
            st.error("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ (p >= 0.05)")

    elif analysis_type == "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—á–µ—Å—Ç–∏":
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ç–µ–∫—É—á–µ—Å—Ç–∏ –∫–∞–¥—Ä–æ–≤")

        attrition_rate = df['attrition'].value_counts(normalize=True)['Yes']
        st.metric("–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—É—á–µ—Å—Ç–∏", f"{attrition_rate:.1%}")

        st.subheader("–¢–µ–∫—É—á–µ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                                df.select_dtypes(exclude=np.number).columns.tolist())

        attrition_by_category = df.groupby(category)['attrition'].apply(
            lambda x: (x == 'Yes').mean()
        ).sort_values(ascending=False)

        fig = px.bar(
            attrition_by_category.reset_index(),
            x=category,
            y='attrition',
            color=category,
            labels={'attrition': '–£—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—É—á–µ—Å—Ç–∏'},
            title=f"–£—Ä–æ–≤–µ–Ω—å —Ç–µ–∫—É—á–µ—Å—Ç–∏ –ø–æ {category}"
        )
        fig.update_yaxes(tickformat=".0%")
        st.plotly_chart(fig, use_container_width=True)

        # –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤"):
            from sklearn.linear_model import LogisticRegression
            from sklearn.preprocessing import LabelEncoder

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            X = df.drop(columns=['attrition'])
            y = df['attrition'].map({'Yes': 1, 'No': 0})

            # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            cat_cols = X.select_dtypes(exclude=np.number).columns
            le = LabelEncoder()
            for col in cat_cols:
                X[col] = le.fit_transform(X[col])

            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            model = LogisticRegression(max_iter=1000)
            model.fit(X, y)

            # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            importance = pd.DataFrame({
                'feature': X.columns,
                'coefficient': model.coef_[0],
                'abs_coefficient': np.abs(model.coef_[0])
            }).sort_values('abs_coefficient', ascending=False)

            fig = px.bar(
                importance.head(10),
                x='coefficient',
                y='feature',
                orientation='h',
                title="–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—á–µ—Å—Ç–∏"
            )
            st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.header("–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

    ml_type = st.selectbox(
        "–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞",
        ["–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è", "PCA", "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—á–µ—Å—Ç–∏"]
    )

    if ml_type == "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è":
        st.subheader("–ö–ª–∞—Å—Ç–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–º k-—Å—Ä–µ–¥–Ω–∏—Ö")

        numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
        features = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏",
            numeric_cols,
            default=['salary', 'performance_score', 'satisfaction_score']
        )

        if len(features) < 2:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 –ø—Ä–∏–∑–Ω–∞–∫–∞")
            st.stop()

        n_clusters = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", 2, 5, 3)

        X = df[features]
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        kmeans = KMeans(n_clusters=n_clusters, random_state=42)
        clusters = kmeans.fit_predict(X_scaled)

        df['cluster'] = clusters

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        if len(features) >= 3:
            fig = px.scatter_3d(
                df,
                x=features[0],
                y=features[1],
                z=features[2],
                color='cluster',
                title=f"–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ {', '.join(features[:3])}",
                hover_data=df.columns.tolist()
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            fig = px.scatter(
                df,
                x=features[0],
                y=features[1],
                color='cluster',
                title=f"–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ {features[0]} –∏ {features[1]}",
                hover_data=df.columns.tolist()
            )
            st.plotly_chart(fig, use_container_width=True)

        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
        silhouette = silhouette_score(X_scaled, clusters)
        st.metric("Silhouette Score", f"{silhouette:.3f}")

        # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
        st.subheader("–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º")
        cluster_stats = df.groupby('cluster')[features].mean()
        st.dataframe(cluster_stats.style.background_gradient(cmap='Blues'), use_container_width=True)

    elif ml_type == "PCA":
        st.subheader("–ê–Ω–∞–ª–∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (PCA)")

        numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
        features = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è PCA",
            numeric_cols,
            default=['age', 'salary', 'experience', 'performance_score', 'satisfaction_score']
        )

        if len(features) < 2:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 –ø—Ä–∏–∑–Ω–∞–∫–∞")
            st.stop()

        X = df[features]
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        pca = PCA(n_components=2)
        principal_components = pca.fit_transform(X_scaled)

        df_pca = pd.DataFrame(
            data=principal_components,
            columns=['PC1', 'PC2']
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ü–≤–µ—Ç–∞
        hue = st.selectbox("–¶–≤–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", ['None'] + df.select_dtypes(exclude=np.number).columns.tolist())

        fig = px.scatter(
            df_pca,
            x='PC1',
            y='PC2',
            color=None if hue == 'None' else df[hue],
            title="PCA –†–µ–∑—É–ª—å—Ç–∞—Ç",
            hover_data=df.columns.tolist()
        )
        st.plotly_chart(fig, use_container_width=True)

        # –û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è
        explained_var = pca.explained_variance_ratio_
        st.metric("–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è (PC1)", f"{explained_var[0]:.1%}")
        st.metric("–û–±—ä—è—Å–Ω–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è (PC2)", f"{explained_var[1]:.1%}")

        # Loadings
        st.subheader("–ù–∞–≥—Ä—É–∑–∫–∏ (Loadings)")
        loadings = pd.DataFrame(
            pca.components_.T,
            columns=['PC1', 'PC2'],
            index=features
        )
        st.dataframe(loadings.style.background_gradient(cmap='RdBu', axis=None, vmin=-1, vmax=1),
                     use_container_width=True)

    elif ml_type == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—á–µ—Å—Ç–∏":
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—á–µ—Å—Ç–∏ –∫–∞–¥—Ä–æ–≤")

        from sklearn.model_selection import train_test_split
        from sklearn.ensemble import RandomForestClassifier
        from sklearn.metrics import classification_report, confusion_matrix

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        X = df.drop(columns=['attrition'])
        y = df['attrition'].map({'Yes': 1, 'No': 0})

        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        cat_cols = X.select_dtypes(exclude=np.number).columns
        X = pd.get_dummies(X, columns=cat_cols, drop_first=True)

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.3, random_state=42, stratify=y
        )

        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)

        # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        y_pred = model.predict(X_test)

        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
        st.text(classification_report(y_test, y_pred))

        # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
        cm = confusion_matrix(y_test, y_pred)
        fig = px.imshow(
            cm,
            labels=dict(x="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π", y="–ò—Å—Ç–∏–Ω–Ω—ã–π", color="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
            x=['No', 'Yes'],
            y=['No', 'Yes'],
            text_auto=True,
            title="–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫"
        )
        st.plotly_chart(fig, use_container_width=True)

        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        importance = pd.DataFrame({
            'feature': X.columns,
            'importance': model.feature_importances_
        }).sort_values('importance', ascending=False)

        fig = px.bar(
            importance.head(10),
            x='importance',
            y='feature',
            orientation='h',
            title="–¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"
        )
        st.plotly_chart(fig, use_container_width=True)

# –§—É—Ç–µ—Ä
st.sidebar.markdown("---")
st.sidebar.markdown("""
**HR –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞**  
–í–µ—Ä—Å–∏—è 1.0  
¬© 2023 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –î–∂–æ–ª–¥–æ—à–æ–≤–æ–π –ú.
""")

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
if st.sidebar.button("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"):
    filename = f"data/employee_data_export.csv"
    df.to_csv(filename, index=False)
    st.sidebar.success(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")